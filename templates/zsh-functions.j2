# ~/.zsh/functions.zsh - Custom shell functions
# Generated by Ansible init system

{% if shell.functions.enable_common_functions | default(true) %}
# Extract archives
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar e "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Find and replace in files
findreplace() {
    if [ $# -ne 3 ]; then
        echo "Usage: findreplace <search> <replace> <file_pattern>"
        return 1
    fi
    find . -name "$3" -type f -exec sed -i "s/$1/$2/g" {} +
}

# Get file size
filesize() {
    if [ -f "$1" ]; then
        du -h "$1" | cut -f1
    else
        echo "File not found: $1"
    fi
}

# Weather function
weather() {
    local city="${1:-}"
    if [ -n "$city" ]; then
        curl -s "wttr.in/$city"
    else
        curl -s "wttr.in"
    fi
}
{% endif %}

{% if shell.functions.enable_development_functions | default(true) %}
# Git functions
gitignore() {
    curl -sL "https://www.gitignore.io/api/$*"
}

# Create git repository
gitinit() {
    if [ -n "$1" ]; then
        mkdir "$1" && cd "$1" && git init
        echo "# $1" > README.md
        git add README.md
        git commit -m "Initial commit"
    else
        git init
    fi
}

# Python virtual environment functions
venv() {
    if [ -n "$1" ]; then
        python3 -m venv "$1"
        source "$1/bin/activate"
    else
        python3 -m venv venv
        source venv/bin/activate
    fi
}

# Quick HTTP server
serve() {
    local port="${1:-8000}"
    echo "Starting HTTP server on port $port..."
    python3 -m http.server "$port"
}

# Docker functions
dcleanup() {
    echo "Cleaning up Docker containers, images, and volumes..."
    docker container prune -f
    docker image prune -f
    docker volume prune -f
    docker network prune -f
}
{% endif %}

{% if shell.functions.enable_navigation_functions | default(true) %}
# Fast directory navigation
up() {
    local d=""
    local limit="$1"
    
    # Default to limit of 1
    if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
        limit=1
    fi
    
    for ((i=1; i<=limit; i++)); do
        d="../$d"
    done
    
    # perform cd. Show error if cd fails
    if ! cd "$d"; then
        echo "Couldn't go up $limit dirs.";
    fi
}

# Search for files and directories
search() {
    if [ $# -eq 0 ]; then
        echo "Usage: search <pattern> [path]"
        return 1
    fi
    
    local pattern="$1"
    local path="${2:-.}"
    
    find "$path" -iname "*$pattern*" 2>/dev/null
}

# Quick cd to project directories
p() {
    local project_dir="$HOME/Projects"
    if [ -n "$1" ]; then
        cd "$project_dir/$1" 2>/dev/null || cd "$project_dir" && ls
    else
        cd "$project_dir" && ls
    fi
}
{% endif %}

# System information functions
sysinfo() {
    echo "System Information:"
    echo "==================="
    uname -a
    echo ""
    
{% if ansible_os_family == 'Darwin' %}
    echo "macOS Version:"
    sw_vers
    echo ""
    
    echo "Hardware:"
    system_profiler SPHardwareDataType | grep -E "(Model|Processor|Memory)"
{% else %}
    echo "Distribution:"
    lsb_release -a 2>/dev/null || cat /etc/os-release
    echo ""
    
    echo "Hardware:"
    lscpu | head -10
    echo ""
    
    echo "Memory:"
    free -h
{% endif %}
}

# Network functions
myip() {
    curl -s https://ipinfo.io/ip
}

localip() {
{% if ansible_os_family == 'Darwin' %}
    ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\  -f2
{% else %}
    hostname -I | awk '{print $1}'
{% endif %}
}

# Process functions
pskill() {
    if [ -n "$1" ]; then
        ps aux | grep "$1" | grep -v grep | awk '{print $2}' | xargs kill
    else
        echo "Usage: pskill <process_name>"
    fi
}

# Backup function
backup() {
    if [ -n "$1" ]; then
        cp "$1" "$1.backup.$(date +%Y%m%d_%H%M%S)"
        echo "Backup created: $1.backup.$(date +%Y%m%d_%H%M%S)"
    else
        echo "Usage: backup <file>"
    fi
} 