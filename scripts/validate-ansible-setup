#!/bin/bash

# Validation script for Ansible orchestration setup
# Tests the core infrastructure without requiring sudo

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test functions
test_passed() {
    echo -e "${GREEN}✓${NC} $1"
}

test_failed() {
    echo -e "${RED}✗${NC} $1"
    return 1
}

test_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

echo "=== Ansible Orchestration Setup Validation ==="
echo

# Test 1: Check if virtual environment is active
echo "Testing virtual environment..."
if [[ "${VIRTUAL_ENV:-}" ]]; then
    test_passed "Virtual environment is active: $VIRTUAL_ENV"
else
    test_failed "Virtual environment is not active"
fi

# Test 2: Check if Ansible is available
echo "Testing Ansible availability..."
if command -v ansible-playbook >/dev/null 2>&1; then
    ANSIBLE_VERSION=$(ansible-playbook --version | head -n1)
    test_passed "Ansible is available: $ANSIBLE_VERSION"
else
    test_failed "Ansible is not available in PATH"
fi

# Test 3: Test playbook syntax
echo "Testing playbook syntax..."
if ansible-playbook --syntax-check playbook.yml >/dev/null 2>&1; then
    test_passed "Main playbook syntax is valid"
else
    test_failed "Main playbook has syntax errors"
fi

# Test 4: Test inventory
echo "Testing inventory..."
if ansible-inventory --list >/dev/null 2>&1; then
    test_passed "Inventory is valid"
else
    test_failed "Inventory has configuration issues"
fi

# Test 5: Test platform detection (dry run)
echo "Testing platform detection..."
if ansible-playbook --check --tags never playbook.yml >/dev/null 2>&1; then
    test_passed "Platform detection works"
else
    # This might fail due to sudo requirements, so we'll check the output more carefully
    OUTPUT=$(ansible-playbook --check playbook.yml 2>&1 | grep "Detected platform:" || true)
    if [[ -n "$OUTPUT" ]]; then
        PLATFORM=$(echo "$OUTPUT" | sed -n "s/.*Detected platform: \(.*\)/\1/p")
        test_passed "Platform detection works: $PLATFORM"
    else
        test_warning "Platform detection test inconclusive (may require sudo for full test)"
    fi
fi

# Test 6: Check project structure
echo "Testing project structure..."
REQUIRED_DIRS=(
    "playbooks"
    "playbooks/linux"
    "playbooks/macos" 
    "playbooks/common"
    "inventory"
    "inventory/group_vars"
)

REQUIRED_FILES=(
    "playbook.yml"
    "ansible.cfg"
    "inventory/localhost.yml"
    "inventory/group_vars/all.yml"
    "inventory/group_vars/linux.yml"
    "inventory/group_vars/macos.yml"
    "playbooks/main.yml"
    "playbooks/linux/common.yml"
    "playbooks/macos/common.yml"
    "playbooks/common/shell.yml"
    "playbooks/common/development.yml"
    "playbooks/common/python.yml"
)

structure_ok=true
for dir in "${REQUIRED_DIRS[@]}"; do
    if [[ -d "$dir" ]]; then
        test_passed "Directory exists: $dir"
    else
        test_failed "Missing directory: $dir"
        structure_ok=false
    fi
done

for file in "${REQUIRED_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        test_passed "File exists: $file"
    else
        test_failed "Missing file: $file"
        structure_ok=false
    fi
done

# Test 7: Test variable loading
echo "Testing variable loading..."
if ansible-playbook --check --list-tasks playbook.yml >/dev/null 2>&1; then
    test_passed "Variables load correctly"
else
    test_failed "Variable loading has issues"
fi

echo
echo "=== Validation Summary ==="
if $structure_ok; then
    echo -e "${GREEN}✓ Core infrastructure setup is complete and functional${NC}"
    echo -e "${GREEN}✓ Phase 1: Core Infrastructure Setup - COMPLETED${NC}"
    echo
    echo "Next steps:"
    echo "- Run with sudo to test full functionality: sudo -E ansible-playbook playbook.yml"
    echo "- Or use the -K flag to prompt for password: ansible-playbook -K playbook.yml"
    exit 0
else
    echo -e "${RED}✗ Core infrastructure setup has issues${NC}"
    exit 1
fi 