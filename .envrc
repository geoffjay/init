#!/usr/bin/env bash
# Environment configuration for direnv

# Enable strict error handling
set -euo pipefail

# Manually source asdf for tool version management
if [[ -f "$HOME/.asdf/asdf.sh" ]]; then
    source "$HOME/.asdf/asdf.sh"
elif [[ -f "/usr/local/bin/asdf" ]]; then
    # Load asdf
    export PATH="/usr/local/bin:$PATH"
fi

# Use the uv-created virtual environment instead of direnv's default
export VIRTUAL_ENV="$PWD/.venv"
export PATH="$VIRTUAL_ENV/bin:$PATH"

# Project-specific environment variables
export PROJECT_ROOT="$PWD"
export PROJECT_NAME="init"

# Python environment configuration
export PYTHONPATH="$PROJECT_ROOT:${PYTHONPATH:-}"
export PYTHONDONTWRITEBYTECODE=1
export PYTHONUNBUFFERED=1

# Ansible configuration
export ANSIBLE_CONFIG="$PROJECT_ROOT/ansible.cfg"
export ANSIBLE_INVENTORY="$PROJECT_ROOT/inventory/"
export ANSIBLE_ROLES_PATH="$PROJECT_ROOT/roles"
export ANSIBLE_HOST_KEY_CHECKING=False

# Development environment settings
export DEVELOPMENT=true
export LOG_LEVEL=INFO
export DEBUG=false

# Performance optimizations
export ANSIBLE_PIPELINING=True
export ANSIBLE_SSH_PIPELINING=True

# Tool-specific configurations
export UV_CACHE_DIR="$HOME/.cache/uv"
export PIP_CACHE_DIR="$HOME/.cache/pip"

# Load additional environment files if they exist
if [[ -f "$PROJECT_ROOT/.env.local" ]]; then
    source "$PROJECT_ROOT/.env.local"
fi

echo "✅ Environment activated for $PROJECT_NAME"
echo "🐍 Python: $(python --version 2>/dev/null || echo 'Python not available')"
echo "📦 UV: $(uv --version 2>/dev/null || echo 'UV not available')"
echo "🤖 Ansible: $(ansible --version 2>/dev/null | head -1 || echo 'Ansible not available')"
echo "🏠 Project: $PROJECT_ROOT"